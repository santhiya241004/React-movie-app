{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie-app\\\\src\\\\app.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport MovieCard from \"./components/MovieCard\";\nimport WatchlistPage from \"./pages/WatchlistPage\";\nimport Navbar from \"./components/navbar\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OMDB_API_KEY = process.env.REACT_APP_OMDB_API_KEY;\nconst MovieList = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState(\"batman\");\n  const fetchMovies = async () => {\n    try {\n      const res = await fetch(`https://www.omdbapi.com/?apikey=${OMDB_API_KEY}&s=${query}`);\n      const data = await res.json();\n      if (data.Search) {\n        // Map OMDb data to your MovieCard format\n        const formatted = data.Search.map((movie, index) => ({\n          id: movie.imdbID,\n          title: movie.Title,\n          posterUrl: movie.Poster,\n          previewUrl: \"/preview.mp4\" // Optional dummy video or leave blank\n        }));\n        setMovies(formatted);\n      } else {\n        setMovies([]);\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch OMDb data:\", err);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Search movies...\",\n      style: {\n        padding: \"10px\",\n        marginBottom: \"20px\",\n        borderRadius: \"8px\",\n        border: \"1px solid #ccc\",\n        width: \"100%\",\n        maxWidth: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), movies.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      children: \"No movies found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n      movie: movie\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 31\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"EwL7t1/pYrGn7IJ5iVHT60Uo8yQ=\");\n_c = MovieList;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(MovieList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/watchlist\",\n        element: /*#__PURE__*/_jsxDEV(WatchlistPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieList\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","MovieCard","WatchlistPage","Navbar","jsxDEV","_jsxDEV","OMDB_API_KEY","process","env","REACT_APP_OMDB_API_KEY","MovieList","_s","movies","setMovies","query","setQuery","fetchMovies","res","fetch","data","json","Search","formatted","map","movie","index","id","imdbID","title","Title","posterUrl","Poster","previewUrl","err","console","error","className","children","type","value","onChange","e","target","placeholder","style","padding","marginBottom","borderRadius","border","width","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","length","color","_c","App","path","element","_c2","$RefreshReg$"],"sources":["D:/Movie-app/src/app.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport MovieCard from \"./components/MovieCard\";\r\nimport WatchlistPage from \"./pages/WatchlistPage\";\r\nimport Navbar from \"./components/navbar\";\r\nimport \"./index.css\";\r\n\r\nconst OMDB_API_KEY = process.env.REACT_APP_OMDB_API_KEY;\r\n\r\n\r\nconst MovieList = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [query, setQuery] = useState(\"batman\");\r\n\r\n  const fetchMovies = async () => {\r\n    try {\r\n      const res = await fetch(`https://www.omdbapi.com/?apikey=${OMDB_API_KEY}&s=${query}`);\r\n      const data = await res.json();\r\n      if (data.Search) {\r\n        // Map OMDb data to your MovieCard format\r\n        const formatted = data.Search.map((movie, index) => ({\r\n          id: movie.imdbID,\r\n          title: movie.Title,\r\n          posterUrl: movie.Poster,\r\n          previewUrl: \"/preview.mp4\", // Optional dummy video or leave blank\r\n        }));\r\n        setMovies(formatted);\r\n      } else {\r\n        setMovies([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch OMDb data:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      {/* Search input */}\r\n      <input\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}\r\n        placeholder=\"Search movies...\"\r\n        style={{\r\n          padding: \"10px\",\r\n          marginBottom: \"20px\",\r\n          borderRadius: \"8px\",\r\n          border: \"1px solid #ccc\",\r\n          width: \"100%\",\r\n          maxWidth: \"400px\",\r\n        }}\r\n      />\r\n\r\n      {/* Render Movies */}\r\n      {movies.length === 0 ? (\r\n        <p style={{ color: \"white\" }}>No movies found.</p>\r\n      ) : (\r\n        movies.map((movie) => <MovieCard key={movie.id} movie={movie} />)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <Routes>\r\n        <Route path=\"/\" element={<MovieList />} />\r\n        <Route path=\"/watchlist\" element={<WatchlistPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAGvD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,QAAQ,CAAC;EAE5C,MAAMqB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAmCZ,YAAY,MAAMQ,KAAK,EAAE,CAAC;MACrF,MAAMK,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7B,IAAID,IAAI,CAACE,MAAM,EAAE;QACf;QACA,MAAMC,SAAS,GAAGH,IAAI,CAACE,MAAM,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,MAAM;UACnDC,EAAE,EAAEF,KAAK,CAACG,MAAM;UAChBC,KAAK,EAAEJ,KAAK,CAACK,KAAK;UAClBC,SAAS,EAAEN,KAAK,CAACO,MAAM;UACvBC,UAAU,EAAE,cAAc,CAAE;QAC9B,CAAC,CAAC,CAAC;QACHnB,SAAS,CAACS,SAAS,CAAC;MACtB,CAAC,MAAM;QACLT,SAAS,CAAC,EAAE,CAAC;MACf;IACF,CAAC,CAAC,OAAOoB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,GAAG,CAAC;IAClD;EACF,CAAC;EAEDrC,SAAS,CAAC,MAAM;IACdoB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACF,KAAK,CAAC,CAAC;EAEX,oBACET,OAAA;IAAK+B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAE7BhC,OAAA;MACEiC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEzB,KAAM;MACb0B,QAAQ,EAAGC,CAAC,IAAK1B,QAAQ,CAAC0B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC,kBAAkB;MAC9BC,KAAK,EAAE;QACLC,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE,MAAM;QACpBC,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAE,gBAAgB;QACxBC,KAAK,EAAE,MAAM;QACbC,QAAQ,EAAE;MACZ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAGD1C,MAAM,CAAC2C,MAAM,KAAK,CAAC,gBAClBlD,OAAA;MAAGuC,KAAK,EAAE;QAAEY,KAAK,EAAE;MAAQ,CAAE;MAAAnB,QAAA,EAAC;IAAgB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAElD1C,MAAM,CAACW,GAAG,CAAEC,KAAK,iBAAKnB,OAAA,CAACJ,SAAS;MAAgBuB,KAAK,EAAEA;IAAM,GAAvBA,KAAK,CAACE,EAAE;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAAC,CACjE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAvDID,SAAS;AAAA+C,EAAA,GAAT/C,SAAS;AAyDf,MAAMgD,GAAG,GAAGA,CAAA,KAAM;EAChB,oBACErD,OAAA,CAACP,MAAM;IAAAuC,QAAA,gBACLhC,OAAA,CAACF,MAAM;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVjD,OAAA,CAACN,MAAM;MAAAsC,QAAA,gBACLhC,OAAA,CAACL,KAAK;QAAC2D,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEvD,OAAA,CAACK,SAAS;UAAAyC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1CjD,OAAA,CAACL,KAAK;QAAC2D,IAAI,EAAC,YAAY;QAACC,OAAO,eAAEvD,OAAA,CAACH,aAAa;UAAAiD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACO,GAAA,GAVIH,GAAG;AAYT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}