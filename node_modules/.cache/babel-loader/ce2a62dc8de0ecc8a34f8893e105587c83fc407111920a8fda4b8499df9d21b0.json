{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie-app\\\\src\\\\components\\\\MovieList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MovieCard from \"./MovieCard\";\nimport \"../styles/MovieList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY;\nconst MovieList = () => {\n  _s();\n  const [searchInput, setSearchInput] = useState(\"batman\");\n  const [query, setQuery] = useState(\"batman\");\n  const [movies, setMovies] = useState([]);\n  const fetchMovies = async () => {\n    try {\n      const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&s=${query}`);\n      const data = await res.json();\n      if (data.Search) {\n        const formatted = data.Search.map(movie => ({\n          id: movie.imdbID,\n          title: movie.Title,\n          posterUrl: movie.Poster,\n          previewUrl: \"/preview.mp4\" // dummy preview\n        }));\n        setMovies(formatted);\n      } else {\n        setMovies([]);\n      }\n    } catch (err) {\n      console.error(\"OMDb fetch error:\", err);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchInput,\n        onChange: e => setSearchInput(e.target.value),\n        placeholder: \"Search movies...\",\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setQuery(searchInput),\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-scroll-container\",\n      children: movies.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white\",\n        children: \"No movies found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this) : movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 33\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieList, \"2SvCrf75TpsGfj2kH446KizHauQ=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useState","useEffect","MovieCard","jsxDEV","_jsxDEV","TMDB_API_KEY","process","env","REACT_APP_TMDB_API_KEY","MovieList","_s","searchInput","setSearchInput","query","setQuery","movies","setMovies","fetchMovies","res","fetch","data","json","Search","formatted","map","movie","id","imdbID","title","Title","posterUrl","Poster","previewUrl","err","console","error","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","_c","$RefreshReg$"],"sources":["D:/Movie-app/src/components/MovieList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport \"../styles/MovieList.css\";\r\n\r\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n\r\nconst MovieList = () => {\r\n  const [searchInput, setSearchInput] = useState(\"batman\");\r\n  const [query, setQuery] = useState(\"batman\");\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const fetchMovies = async () => {\r\n    try {\r\n      const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&s=${query}`);\r\n      const data = await res.json();\r\n      if (data.Search) {\r\n        const formatted = data.Search.map((movie) => ({\r\n          id: movie.imdbID,\r\n          title: movie.Title,\r\n          posterUrl: movie.Poster,\r\n          previewUrl: \"/preview.mp4\", // dummy preview\r\n        }));\r\n        setMovies(formatted);\r\n      } else {\r\n        setMovies([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"OMDb fetch error:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"movie-list-container\">\r\n      {/* Search Bar */}\r\n      <div className=\"search-bar-wrapper\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchInput}\r\n          onChange={(e) => setSearchInput(e.target.value)}\r\n          placeholder=\"Search movies...\"\r\n          className=\"search-input\"\r\n        />\r\n        <button onClick={() => setQuery(searchInput)} className=\"search-button\">\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      {/* Movie Cards */}\r\n      <div className=\"movie-scroll-container\">\r\n        {movies.length === 0 ? (\r\n          <p className=\"text-white\">No movies found.</p>\r\n        ) : (\r\n          movies.map((movie) => <MovieCard key={movie.id} movie={movie} />)\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}