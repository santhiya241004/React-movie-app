{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst WATCHLIST_KEY = \"my-movie-watchlist\";\nexport const useWatchlist = () => {\n  _s();\n  const [watchlist, setWatchlist] = useState([]);\n\n  // Load from localStorage on first render\n  useEffect(() => {\n    const stored = localStorage.getItem(WATCHLIST_KEY);\n    if (stored) {\n      setWatchlist(JSON.parse(stored));\n    }\n  }, []);\n\n  // Save to localStorage whenever watchlist changes\n  useEffect(() => {\n    console.log(\"Updated watchlist:\", watchlist);\n    localStorage.setItem(WATCHLIST_KEY, JSON.stringify(watchlist));\n  }, [watchlist]);\n\n  // Add or remove movie\n  const toggleWatchlist = movie => {\n    const exists = watchlist.some(m => m.title === movie.title);\n    if (exists) {\n      setWatchlist(watchlist.filter(m => m.title !== movie.title));\n    } else {\n      setWatchlist([...watchlist, movie]);\n    }\n  };\n\n  // Check if a movie is in the watchlist\n  const isInWatchlist = movie => {\n    return watchlist.some(m => m.title === movie.title);\n  };\n  return {\n    watchlist,\n    toggleWatchlist,\n    isInWatchlist\n  };\n};\n_s(useWatchlist, \"eP/7E0LW+QXyxpJxgX/s4gBwAw8=\");","map":{"version":3,"names":["useState","useEffect","WATCHLIST_KEY","useWatchlist","_s","watchlist","setWatchlist","stored","localStorage","getItem","JSON","parse","console","log","setItem","stringify","toggleWatchlist","movie","exists","some","m","title","filter","isInWatchlist"],"sources":["D:/Movie-app/src/hooks/useWatchlist.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst WATCHLIST_KEY = \"my-movie-watchlist\";\r\n\r\nexport const useWatchlist = () => {\r\n  const [watchlist, setWatchlist] = useState([]);\r\n\r\n  // Load from localStorage on first render\r\n  useEffect(() => {\r\n    const stored = localStorage.getItem(WATCHLIST_KEY);\r\n    if (stored) {\r\n      setWatchlist(JSON.parse(stored));\r\n    }\r\n  }, []);\r\n\r\n  // Save to localStorage whenever watchlist changes\r\n  useEffect(() => {\r\n     console.log(\"Updated watchlist:\", watchlist);\r\n    localStorage.setItem(WATCHLIST_KEY, JSON.stringify(watchlist));\r\n  }, [watchlist]);\r\n\r\n  // Add or remove movie\r\n  const toggleWatchlist = (movie) => {\r\n    const exists = watchlist.some((m) => m.title === movie.title);\r\n    if (exists) {\r\n      setWatchlist(watchlist.filter((m) => m.title !== movie.title));\r\n    } else {\r\n      setWatchlist([...watchlist, movie]);\r\n    }\r\n  };\r\n\r\n  // Check if a movie is in the watchlist\r\n  const isInWatchlist = (movie) => {\r\n    return watchlist.some((m) => m.title === movie.title);\r\n  };\r\n\r\n  return {\r\n    watchlist,\r\n    toggleWatchlist,\r\n    isInWatchlist,\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,aAAa,GAAG,oBAAoB;AAE1C,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMM,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACP,aAAa,CAAC;IAClD,IAAIK,MAAM,EAAE;MACVD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,CAAC;IAClC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAN,SAAS,CAAC,MAAM;IACbW,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,SAAS,CAAC;IAC7CG,YAAY,CAACM,OAAO,CAACZ,aAAa,EAAEQ,IAAI,CAACK,SAAS,CAACV,SAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMW,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,MAAM,GAAGb,SAAS,CAACc,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKJ,KAAK,CAACI,KAAK,CAAC;IAC7D,IAAIH,MAAM,EAAE;MACVZ,YAAY,CAACD,SAAS,CAACiB,MAAM,CAAEF,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKJ,KAAK,CAACI,KAAK,CAAC,CAAC;IAChE,CAAC,MAAM;MACLf,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEY,KAAK,CAAC,CAAC;IACrC;EACF,CAAC;;EAED;EACA,MAAMM,aAAa,GAAIN,KAAK,IAAK;IAC/B,OAAOZ,SAAS,CAACc,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKJ,KAAK,CAACI,KAAK,CAAC;EACvD,CAAC;EAED,OAAO;IACLhB,SAAS;IACTW,eAAe;IACfO;EACF,CAAC;AACH,CAAC;AAACnB,EAAA,CArCWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}